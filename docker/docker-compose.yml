services:
  db:
    image: postgres:13
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER:-admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-comandas}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/01_init.sql
      - ./sql/01_schema.sql:/docker-entrypoint-initdb.d/02_schema.sql
      - ./sql/02_add_info_columns.sql:/docker-entrypoint-initdb.d/03_add_info_columns.sql
      - ./sql/import_beverages.sql:/docker-entrypoint-initdb.d/04_import_beverages.sql
      - ./sql/beverages_fixed.json:/docker-entrypoint-initdb.d/beverages_fixed.json
      - ./sql/import_desserts_fixed.sql:/docker-entrypoint-initdb.d/05_import_desserts_fixed.sql
      - ./sql/desserts_fixed.json:/docker-entrypoint-initdb.d/desserts_fixed.json
      - ./sql/import_plates_fixed.sql:/docker-entrypoint-initdb.d/06_import_plates_fixed.sql
      - ./sql/plates_fixed.json:/docker-entrypoint-initdb.d/plates_fixed.json
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-admin} -d ${DB_NAME:-comandas}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
  adminer:
    image: adminer:latest
    container_name: adminer_pg
    restart: always
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres_db
      ADMINER_PASSWORD: ${ADMINER_PASSWORD}
    networks:
      - app-network
networks:
  app-network:
    driver: bridge
volumes:
  postgres_data:
    name: postgres_data
import { Router, Request, Response, NextFunction, RequestHandler } from 'express';
import { AppDataSource } from '../config/database';
import { Plate, FoodType } from '../entities/Plate';
import { Dessert } from '../entities/Dessert';
import { Beverage, BeverageType } from '../entities/Beverage';
import { FindOptionsWhere } from 'typeorm';
import { validate, ValidationError } from 'class-validator';
import { plainToInstance, ClassConstructor } from 'class-transformer';

// Função auxiliar para lidar com erros
const handleError = (res: Response, error: unknown, message: string) => {
  console.error(message, error);
  if (error instanceof Error) {
    return res.status(500).json({ message: `${message}: ${error.message}` });
  }
  return res.status(500).json({ message: `${message}: Erro desconhecido` });
};

// Função para formatar erros de validação
const formatValidationErrors = (errors: ValidationError[]): Record<string, string[]> => {
  const result: Record<string, string[]> = {};
  
  errors.forEach(error => {
    if (error.constraints) {
      result[error.property] = Object.values(error.constraints);
    }
    
    if (error.children && error.children.length > 0) {
      const nestedErrors = formatValidationErrors(error.children);
      Object.assign(result, nestedErrors);
    }
  });
  
  return result;
};

const router = Router();

// Rota de boas-vindas
router.get('/', (_req, res) => {
  res.json({ message: 'Bem-vindo à API do Sistema de Comandas' });
});

// Middleware para validação de dados
const validateRequest = <T extends object>(dtoClass: ClassConstructor<T>): RequestHandler => {
  return (async (req: Request, res: Response, next: NextFunction) => {
    try {
      const dto = plainToInstance(dtoClass, req.body);
      const errors = await validate(dto as object, { whitelist: true });
      
      if (errors.length > 0) {
        const formattedErrors = formatValidationErrors(errors);
        return res.status(400).json({
          message: 'Erro de validação',
          errors: formattedErrors
        });
      }
      
      req.body = dto as any;
      return next();
    } catch (error) {
      return next(error);
    }
  }) as RequestHandler;
};

// Rotas de Pratos
router.get<{}, Plate[]>('/plates', (async (_req, res) => {
  try {
    const plates = await AppDataSource.getRepository(Plate).find();
    res.json(plates);
  } catch (error) {
    handleError(res, error, 'Erro ao buscar pratos');
  }
}) as RequestHandler);

router.get<{ id: string }, Plate | { message: string }, {}, {}, {}>('/plates/:id', (async (req, res) => {
  try {
    const plateId = parseInt(req.params.id, 10);
    if (isNaN(plateId)) {
      res.status(400).json({ message: 'ID inválido' });
      return;
    }
    
    const plate = await AppDataSource.getRepository(Plate).findOneBy({ id: plateId } as FindOptionsWhere<Plate>);
    
    if (!plate) {
      res.status(404).json({ message: 'Prato não encontrado' });
      return;
    }
    
    res.json(plate);
  } catch (error) {
    handleError(res, error, 'Erro ao buscar prato');
  }
}) as RequestHandler);

class CreatePlateDto {
  name!: string;
  description!: string;
  price!: number;
  info?: string;
  type!: FoodType;
}

router.post<{}, {}, CreatePlateDto>('/plates', validateRequest(CreatePlateDto), (async (req, res) => {
  try {
    const { name, description, price, info, type } = req.body;
    
    const plate = new Plate();
    plate.name = name;
    plate.description = description;
    plate.price = price;
    plate.info = info;
    plate.type = type;
    
    const savedPlate = await AppDataSource.getRepository(Plate).save(plate);
    
    res.status(201).json(savedPlate);
  } catch (error) {
    handleError(res, error, 'Erro ao criar prato');
  }
}) as RequestHandler);

// DTO para criação de sobremesas
class CreateDessertDto {
  name!: string;
  description!: string;
  price!: number;
  info?: string;
}

// Rotas de Sobremesas
router.get<{}, Dessert[]>('/desserts', (async (_req, res) => {
  try {
    const desserts = await AppDataSource.getRepository(Dessert).find();
    res.json(desserts);
  } catch (error) {
    handleError(res, error, 'Erro ao buscar sobremesas');
  }
}) as RequestHandler);

router.get<{ id: string }, Dessert | { message: string }, {}, {}, {}>('/desserts/:id', (async (req, res) => {
  try {
    const dessertId = parseInt(req.params.id, 10);
    if (isNaN(dessertId)) {
      res.status(400).json({ message: 'ID inválido' });
      return;
    }
    
    const dessert = await AppDataSource.getRepository(Dessert).findOneBy({ id: dessertId } as FindOptionsWhere<Dessert>);
    
    if (!dessert) {
      res.status(404).json({ message: 'Sobremesa não encontrada' });
      return;
    }
    
    res.json(dessert);
  } catch (error) {
    handleError(res, error, 'Erro ao buscar sobremesa');
  }
}) as RequestHandler);

router.post<{}, {}, CreateDessertDto>('/desserts', validateRequest(CreateDessertDto), (async (req, res) => {
  try {
    const { name, description, price, info } = req.body;
    
    const dessert = new Dessert();
    dessert.name = name;
    dessert.description = description;
    dessert.price = price;
    dessert.info = info;
    
    const savedDessert = await AppDataSource.getRepository(Dessert).save(dessert);
    
    res.status(201).json(savedDessert);
  } catch (error) {
    handleError(res, error, 'Erro ao criar sobremesa');
  }
}) as RequestHandler);

// DTO para criação de bebidas
class CreateBeverageDto {
  name!: string;
  description!: string;
  price!: number;
  info?: string;
  type!: BeverageType;
}

// Rotas de Bebidas
router.get<{}, Beverage[]>('/beverages', (async (_req, res) => {
  try {
    const beverages = await AppDataSource.getRepository(Beverage).find();
    res.json(beverages);
  } catch (error) {
    handleError(res, error, 'Erro ao buscar bebidas');
  }
}) as RequestHandler);

router.get<{ id: string }, Beverage | { message: string }, {}, {}, {}>('/beverages/:id', (async (req, res) => {
  try {
    const beverageId = parseInt(req.params.id, 10);
    if (isNaN(beverageId)) {
      res.status(400).json({ message: 'ID inválido' });
      return;
    }
    
    const beverage = await AppDataSource.getRepository(Beverage).findOneBy({ id: beverageId } as FindOptionsWhere<Beverage>);
    
    if (!beverage) {
      res.status(404).json({ message: 'Bebida não encontrada' });
      return;
    }
    
    res.json(beverage);
  } catch (error) {
    handleError(res, error, 'Erro ao buscar bebida');
  }
}) as RequestHandler);

router.post<{}, {}, CreateBeverageDto>('/beverages', validateRequest(CreateBeverageDto), (async (req, res) => {
  try {
    const { name, description, price, info, type } = req.body;
    
    const beverage = new Beverage();
    beverage.name = name;
    beverage.description = description;
    beverage.price = price;
    beverage.info = info;
    beverage.type = type;
    
    const savedBeverage = await AppDataSource.getRepository(Beverage).save(beverage);
    
    res.status(201).json(savedBeverage);
  } catch (error) {
    handleError(res, error, 'Erro ao criar bebida');
  }
}) as RequestHandler);

export default router;
